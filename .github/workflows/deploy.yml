name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: parenting-assistant-backend
  REGION: us-central1

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚úÖ Authenticate with Google Cloud using Service Account Key
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # ‚úÖ Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # ‚úÖ Verify GCP Configuration
      - name: Verify GCP Configuration
        run: |
          echo "üîç Verifying GCP configuration..."
          echo "Current project: $(gcloud config get-value project)"
          echo "Available services:"
          gcloud run services list --platform managed --region ${{ env.REGION }}
          echo "Current account: $(gcloud auth list --filter=status:ACTIVE --format='value(account)')"

      # ‚úÖ Configure Docker authentication for Google Container Registry (GCR)
      - name: Configure Docker authentication
        run: |
          gcloud auth configure-docker gcr.io --quiet

      # ‚úÖ Ensure required secrets exist
      - name: Check Required Secrets
        run: |
          MISSING=""
          [[ -z "${{ secrets.FIREBASE_PRIVATE_KEY }}" ]] && MISSING="$MISSING FIREBASE_PRIVATE_KEY"
          [[ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ]] && MISSING="$MISSING FIREBASE_PROJECT_ID"
          [[ -z "${{ secrets.FIREBASE_CLIENT_EMAIL }}" ]] && MISSING="$MISSING FIREBASE_CLIENT_EMAIL"
          [[ -z "${{ secrets.OPENAI_API_KEY }}" ]] && MISSING="$MISSING OPENAI_API_KEY"

          if [[ ! -z "$MISSING" ]]; then
            echo "‚ùå ERROR: Missing required secrets: $MISSING"
            exit 1
          fi
          echo "‚úÖ All required secrets are set."

      # ‚úÖ Escape newlines in FIREBASE_PRIVATE_KEY before passing to Docker
      - name: Prepare Firebase Private Key
        run: |
          echo "‚úÖ Formatting Firebase Private Key"
          echo "${{ secrets.FIREBASE_PRIVATE_KEY }}" | sed ':a;N;$!ba;s/\n/\\n/g' > firebase_key.txt
          echo "FIREBASE_PRIVATE_KEY=$(cat firebase_key.txt)" >> $GITHUB_ENV

      # ‚úÖ Build Docker Image
      - name: Build Docker image
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        run: |
          # Escape newlines in FIREBASE_PRIVATE_KEY
          ESCAPED_PRIVATE_KEY=$(echo "$FIREBASE_PRIVATE_KEY" | sed 's/\\n/\\\\n/g')

          # Build the image
          docker buildx build \
            --platform linux/amd64 \
            --build-arg FIREBASE_PROJECT_ID="$FIREBASE_PROJECT_ID" \
            --build-arg FIREBASE_PRIVATE_KEY="$ESCAPED_PRIVATE_KEY" \
            --build-arg FIREBASE_CLIENT_EMAIL="$FIREBASE_CLIENT_EMAIL" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            .

      # ‚úÖ Push Docker Image to GCR
      - name: Push Docker image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      # ‚úÖ Deploy to Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          # Create a temporary env file for deployment in YAML format
          cat << EOF > deployment.yaml
          NODE_ENV: "production"
          REDIS_URL: "${{ secrets.REDIS_URL }}"
          REDIS_HOST: "${{ secrets.REDIS_HOST }}"
          REDIS_PORT: "${{ secrets.REDIS_PORT }}"
          REDIS_AUTH_STRING: "${{ secrets.REDIS_AUTH_STRING }}"
          FIREBASE_PROJECT_ID: "${{ secrets.FIREBASE_PROJECT_ID }}"
          FIREBASE_CLIENT_EMAIL: "${{ secrets.FIREBASE_CLIENT_EMAIL }}"
          OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
          API_RATE_LIMIT_WINDOW_MS: "60000"
          API_RATE_LIMIT_MAX_REQUESTS: "100"
          AI_RATE_LIMIT_WINDOW_MS: "3600000"
          AI_RATE_LIMIT_MAX_REQUESTS: "50"
          CACHE_TTL: "3600"
          CACHE_NAMESPACE: "parenting-assistant"
          FIREBASE_PRIVATE_KEY: '${{ secrets.FIREBASE_PRIVATE_KEY }}'
          EOF

          # Deploy using the env file
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --env-vars-file deployment.yaml \
            --allow-unauthenticated \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --platform=managed \
            --timeout=300 \
            --execution-environment=gen2 \
            --port=8080 \
            --use-http2 \
            --cpu-boost

          # Store the service URL for later use
          echo "url=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT

          # Clean up the temporary env file
          rm deployment.yaml

      # ‚úÖ Print deployment info
      - name: Print Deployment Info
        run: |
          echo "üöÄ Deployment URL: ${{ steps.deploy.outputs.url }}"
          echo "üîÑ Revision: ${{ steps.deploy.outputs.revision }}"
          echo "üìù Project ID: $(gcloud config get-value project)"

      # ‚úÖ Wait for deployment to stabilize
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 30

          # Get the latest revision
          REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(name)' \
            --limit=1)

          echo "üìã Latest revision: $REVISION"

          # Check revision status
          STATUS=$(gcloud run revisions describe $REVISION \
            --region=${{ env.REGION }} \
            --format='value(status.conditions[0].status)')

          echo "üìä Revision status: $STATUS"

          if [[ "$STATUS" != "True" ]]; then
            echo "‚ùå Deployment failed to stabilize"
            echo "üìã Fetching detailed revision status..."
            gcloud run revisions describe $REVISION \
              --region=${{ env.REGION }} \
              --format='yaml'
            exit 1
          fi

          echo "‚úÖ Deployment stabilized successfully"

      # ‚úÖ Show Service URL After Deployment
      - name: Show Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "üåç Service URL: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

          echo "üìã Service details:"
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format='yaml'

      # ‚úÖ Fetch and analyze Cloud Run logs
      - name: Check deployment logs
        run: |
          echo "üìã Fetching deployment logs..."
          echo "----------------------------------------"
          # Get the latest revision
          REVISION=$(gcloud run revisions list --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(name)' --limit=1)

          echo "üîç Checking logs for revision: $REVISION"

          # Fetch logs with specific severity levels and startup-related filters
          gcloud logging read "resource.type=cloud_run_revision AND \
            resource.labels.service_name=${{ env.SERVICE_NAME }} AND \
            resource.labels.revision_name=${REVISION} AND \
            (severity>=WARNING OR \
            textPayload:*error* OR \
            textPayload:*failed* OR \
            textPayload:*timeout* OR \
            textPayload:*crash* OR \
            textPayload:*killed* OR \
            textPayload:*‚ùå*)" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --format="table(timestamp.date('%Y-%m-%d %H:%M:%S'),severity,textPayload)" \
            --order=asc \
            --limit=50

          echo "----------------------------------------"
          echo "‚ú® Checking container startup status..."

          # Check if the service is ready
          STATUS=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.conditions[0].status)")
          if [[ "$STATUS" == "True" ]]; then
            echo "‚úÖ Service is running successfully"
            
            # Try to fetch the health endpoint
            echo "üè• Testing health endpoint..."
            curl -v "$SERVICE_URL/health" || echo "‚ùå Failed to reach health endpoint"
          else
            echo "‚ùå Service failed to start properly"
            echo "üìã Detailed service status:"
            gcloud run services describe ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --format='yaml'
            exit 1
          fi
