name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: parenting-assistant-backend
  REGION: us-central1

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚úÖ Authenticate with Google Cloud using Service Account Key
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # ‚úÖ Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # ‚úÖ Configure Docker authentication for Google Container Registry (GCR)
      - name: Configure Docker authentication
        run: |
          gcloud auth configure-docker gcr.io --quiet

      # ‚úÖ Build Docker Image
      - name: Build Docker image
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        run: |
          # Escape newlines in FIREBASE_PRIVATE_KEY
          ESCAPED_PRIVATE_KEY=$(echo "$FIREBASE_PRIVATE_KEY" | sed 's/\\n/\\\\n/g')

          # Build the image
          docker buildx build \
            --platform linux/amd64 \
            --build-arg FIREBASE_PROJECT_ID="$FIREBASE_PROJECT_ID" \
            --build-arg FIREBASE_PRIVATE_KEY="$ESCAPED_PRIVATE_KEY" \
            --build-arg FIREBASE_CLIENT_EMAIL="$FIREBASE_CLIENT_EMAIL" \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            .

      # ‚úÖ Push Docker Image to GCR
      - name: Push Docker image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      # ‚úÖ Deploy the Container to Cloud Run
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            PORT=8080
            ${{ secrets.REDIS_URL != '' && format('REDIS_URL={0}', secrets.REDIS_URL) }}
            ${{ secrets.REDIS_HOST != '' && format('REDIS_HOST={0}', secrets.REDIS_HOST) }}
            ${{ secrets.REDIS_PORT != '' && format('REDIS_PORT={0}', secrets.REDIS_PORT) }}
            ${{ secrets.REDIS_AUTH_STRING != '' && format('REDIS_AUTH_STRING={0}', secrets.REDIS_AUTH_STRING) }}
            ${{ secrets.FIREBASE_PROJECT_ID != '' && format('FIREBASE_PROJECT_ID={0}', secrets.FIREBASE_PROJECT_ID) }}
            ${{ secrets.FIREBASE_PRIVATE_KEY != '' && format('FIREBASE_PRIVATE_KEY={0}', secrets.FIREBASE_PRIVATE_KEY) }}
            ${{ secrets.FIREBASE_CLIENT_EMAIL != '' && format('FIREBASE_CLIENT_EMAIL={0}', secrets.FIREBASE_CLIENT_EMAIL) }}
            ${{ secrets.OPENAI_API_KEY != '' && format('OPENAI_API_KEY={0}', secrets.OPENAI_API_KEY) }}
            ${{ secrets.API_RATE_LIMIT_WINDOW_MS != '' && format('API_RATE_LIMIT_WINDOW_MS={0}', secrets.API_RATE_LIMIT_WINDOW_MS) }}
            ${{ secrets.API_RATE_LIMIT_MAX_REQUESTS != '' && format('API_RATE_LIMIT_MAX_REQUESTS={0}', secrets.API_RATE_LIMIT_MAX_REQUESTS) }}
            ${{ secrets.AI_RATE_LIMIT_WINDOW_MS != '' && format('AI_RATE_LIMIT_WINDOW_MS={0}', secrets.AI_RATE_LIMIT_WINDOW_MS) }}
            ${{ secrets.AI_RATE_LIMIT_MAX_REQUESTS != '' && format('AI_RATE_LIMIT_MAX_REQUESTS={0}', secrets.AI_RATE_LIMIT_MAX_REQUESTS) }}
            ${{ secrets.CACHE_TTL != '' && format('CACHE_TTL={0}', secrets.CACHE_TTL) }}
            ${{ secrets.CACHE_NAMESPACE != '' && format('CACHE_NAMESPACE={0}', secrets.CACHE_NAMESPACE) }}
          flags: |
            --allow-unauthenticated
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --platform=managed
            --timeout=300
            --cpu-boost
            --execution-environment=gen2
            --port=8080
            --use-http2
            --set-cloudsql-instances=none
            --no-use-http2

      # ‚úÖ Wait for deployment to stabilize
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30

          # Get the latest revision
          REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(name)' \
            --limit=1)

          # Check revision status
          STATUS=$(gcloud run revisions describe $REVISION \
            --region=${{ env.REGION }} \
            --format='value(status.conditions[0].status)')

          if [[ "$STATUS" != "True" ]]; then
            echo "‚ùå Deployment failed to stabilize"
            exit 1
          fi

          echo "‚úÖ Deployment stabilized successfully"

      # ‚úÖ Show Service URL After Deployment
      - name: Show Service URL
        run: |
          echo "Service URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')"
          echo "SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_ENV

      # ‚úÖ Run endpoint tests
      - name: Test endpoints
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TEST_TOKEN }}
        run: |
          echo "üß™ Running endpoint tests..."
          chmod +x ./scripts/test-endpoints.sh
          ./scripts/test-endpoints.sh

      # ‚úÖ Fetch and analyze Cloud Run logs
      - name: Check deployment logs
        run: |
          echo "üìã Fetching deployment logs..."
          echo "----------------------------------------"
          # Get the latest revision
          REVISION=$(gcloud run revisions list --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(name)' --limit=1)

          # Fetch logs with specific severity levels and startup-related filters
          gcloud logging read "resource.type=cloud_run_revision AND \
            resource.labels.service_name=${{ env.SERVICE_NAME }} AND \
            resource.labels.revision_name=${REVISION} AND \
            (severity>=WARNING OR \
            textPayload:*error* OR \
            textPayload:*failed* OR \
            textPayload:*timeout* OR \
            textPayload:*crash* OR \
            textPayload:*killed* OR \
            textPayload:*‚ùå*)" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --format="table(timestamp.date('%Y-%m-%d %H:%M:%S'),severity,textPayload)" \
            --order=asc \
            --limit=50

          echo "----------------------------------------"
          echo "‚ú® Checking container startup status..."
          # Check if the service is ready
          STATUS=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.conditions[0].status)")
          if [[ "$STATUS" == "True" ]]; then
            echo "‚úÖ Service is running successfully"
          else
            echo "‚ùå Service failed to start properly"
            exit 1
          fi
